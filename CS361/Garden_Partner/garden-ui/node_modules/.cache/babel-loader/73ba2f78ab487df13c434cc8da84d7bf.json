{"ast":null,"code":"var _jsxFileName = \"/Users/peytonwiederspan/CS361/Garden_Partner/garden-ui/src/pages/search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlantMenu from '../components/plant_menu';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search({\n  navigation\n}) {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [plants, setPlant] = useState([]);\n  const [foundPlant, setFoundPlant] = useState(plants);\n\n  const loadPlant = async () => {\n    const response = await fetch(`/plants`);\n    const data = await response.json();\n    setPlant(data);\n  };\n\n  useEffect(() => {\n    loadPlant();\n  }, []);\n\n  const filter = e => {\n    const keyword = e.target.value;\n\n    if (keyword !== '') {\n      const results = plants.filter(plant => {\n        return plant.name.toLowerCase().startsWith(keyword.toLowerCase()); // Use the toLowerCase() method to make it case-insensitive\n      });\n      setFoundPlant(results);\n    } else {\n      setFoundPlant(plants); // If the text field is empty, show all users\n    }\n\n    setName(keyword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"search\",\n      value: name,\n      onChange: filter,\n      className: \"input\",\n      placeholder: \"Filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list\",\n      children: foundPlant && foundPlant.length > 0 ? foundPlant.map(plant => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"plant\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"plant-name\",\n          children: plant.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)\n      }, plant.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No results found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"x8gMT9hkiBVKkkqxEs7jx4U0eTQ=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/peytonwiederspan/CS361/Garden_Partner/garden-ui/src/pages/search.js"],"names":["React","useState","useEffect","Link","PlantMenu","Search","navigation","name","setName","plants","setPlant","foundPlant","setFoundPlant","loadPlant","response","fetch","data","json","filter","e","keyword","target","value","results","plant","toLowerCase","startsWith","length","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,YAAP;;;AAEA,SAASC,MAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAA8B;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,MAAD,EAASC,QAAT,IAAqBT,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAACQ,MAAD,CAA5C;;AAEA,QAAMI,SAAS,GAAG,YAAY;AAC1B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,SAAF,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAP,IAAAA,QAAQ,CAACM,IAAD,CAAR;AACH,GAJD;;AAMAd,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAKA,QAAMK,MAAM,GAAIC,CAAD,IAAO;AACpB,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAzB;;AAEA,QAAIF,OAAO,KAAK,EAAhB,EAAoB;AAClB,YAAMG,OAAO,GAAGd,MAAM,CAACS,MAAP,CAAeM,KAAD,IAAW;AACvC,eAAOA,KAAK,CAACjB,IAAN,CAAWkB,WAAX,GAAyBC,UAAzB,CAAoCN,OAAO,CAACK,WAAR,EAApC,CAAP,CADuC,CAEvC;AACD,OAHe,CAAhB;AAIAb,MAAAA,aAAa,CAACW,OAAD,CAAb;AACD,KAND,MAMO;AACLX,MAAAA,aAAa,CAACH,MAAD,CAAb,CADK,CAEL;AACD;;AAEDD,IAAAA,OAAO,CAACY,OAAD,CAAP;AACD,GAfD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAEb,IAFT;AAGE,MAAA,QAAQ,EAAEW,MAHZ;AAIE,MAAA,SAAS,EAAC,OAJZ;AAKE,MAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGP,UAAU,IAAIA,UAAU,CAACgB,MAAX,GAAoB,CAAlC,GACChB,UAAU,CAACiB,GAAX,CAAgBJ,KAAD,iBACb;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,YAAhB;AAAA,oBAA8BA,KAAK,CAACjB;AAApC;AAAA;AAAA;AAAA;AAAA;AADF,SAASiB,KAAK,CAACK,EAAf;AAAA;AAAA;AAAA;AAAA,cADF,CADD,gBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAxDQxB,M;;KAAAA,M;AA2DT,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlantMenu from '../components/plant_menu';\nimport '../App.css'\n\nfunction Search({navigation}) {\n  const [name, setName] = useState(\"\");\n  const [plants, setPlant] = useState([]);\n  const [foundPlant, setFoundPlant] = useState(plants);\n\n  const loadPlant = async () => {\n      const response = await fetch(`/plants`);\n      const data = await response.json();\n      setPlant(data);\n  };\n\n  useEffect(() => {\n      loadPlant();\n  }, []);\n\n\n  const filter = (e) => {\n    const keyword = e.target.value;\n\n    if (keyword !== '') {\n      const results = plants.filter((plant) => {\n        return plant.name.toLowerCase().startsWith(keyword.toLowerCase());\n        // Use the toLowerCase() method to make it case-insensitive\n      });\n      setFoundPlant(results);\n    } else {\n      setFoundPlant(plants);\n      // If the text field is empty, show all users\n    }\n\n    setName(keyword);\n  };\n\n  return (\n    <div className=\"container\">\n      <input\n        type=\"search\"\n        value={name}\n        onChange={filter}\n        className=\"input\"\n        placeholder=\"Filter\"\n      />\n\n      <div className=\"user-list\">\n        {foundPlant && foundPlant.length > 0 ? (\n          foundPlant.map((plant) => (\n            <li key={plant.id} className=\"plant\">\n              <span className=\"plant-name\">{plant.name}</span>\n            </li>\n          ))\n        ) : (\n          <h1>No results found!</h1>\n        )}\n      </div>\n    </div>\n  );\n}\n\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}